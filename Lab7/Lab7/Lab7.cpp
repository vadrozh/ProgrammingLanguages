/*
 * Author: Рожков Вадим
 *
 * Group: СБС-901, 2 подгруппа
 *
 * Task, #: 7.22
 *
 * Description: Напишите программу, работающую с динамическим однонаправленным списком. Элемент списка должен описываться структурой Node, содержащей два целочисленных поля a и
				b. Динамический однонаправленный список должен быть реализован в виде класса List. Поля класса: указатель на начало списка start, указатель на текущий элемент списка p. Конструктор
				класса должен создавать список из одного элемента, деструктор класса должен уничтожать список. Кроме этого в классе должны присутствовать методы:
					1) добавить элемент после элемента, на который настроен указатель p (после добавления указатель p остается на месте),
					2) удалить элемент, на который настроен указатель p (после удаления указатель p должен быть настроен на элемент, предшествующий удаляемому),
					3) показать значения полей данных элемента, на который настроен указатель p,
					4) поменять значения полей данных элемента, на который настроен указатель p,
					5) переместить указатель p в начало списка,
					6) переместить указатель p на один элемент вправо,
					7) вывести на консоль значение всех элементов списка (элемент, на который настроен указатель p, должен выводиться в квадратных скобках).
					8) найти последний элемент списка (настроить на него указатель p) для которого выполняется неравенства a>c или b<c, где c – число, запрашиваемое у пользователя. Если таких элементов
						нет, то вывести сообщение «Таких элементов в списке нет».
				В функции main() сначала запрашиваются значения полей первого элемента списка, после чего создается объект класса List. После этого выводится меню, позволяющее вызывать
				методы объекта любое количество раз, пока пользователь не выберет пункт меню «Выход из программы».
 *
*/

#include <iostream>
#include "List.h"

int getValue();

enum class Menu {
	EXIT = 0,
    ADD,
    REMOVE,
    SHOW,
    CHANGE,
    BEGIN,
    STEP,
    SHOWALL,
    FIND
};

int main()
{
	setlocale(LC_ALL, "Russian");
    int a = 0, b = 0;
    cout << "Введите значения a и b первого элемента списка." << endl
         << "a: ";
    a = getValue();
    cout << "b: ";
    b = getValue();
    List * list = new List(a, b);
    bool stop = false;
    while (!stop) {
        cout << endl << "0. Выход из программы" << endl
             << "1. Добавить элемент" << endl
             << "2. Удалить текущий элемент" << endl
             << "3. Показать значения a и b текущего элемента" << endl
             << "4. Изменить значения a и b текущего элемента" << endl
             << "5. Переместить текущий элемент в начало списка" << endl
             << "6. Переместить текущий элемент вправо" << endl
             << "7. Вывести значения элементов всего списка" << endl
             << "8. Найти элемент списка по заданному алгоритму" << endl
             << "Выберите операцию: ";
        int rawOption = -1;
        while ((rawOption = getValue()) < 0)
            cout << "Некорректный ввод, попробуйте еще раз: ";
        Menu option = static_cast<Menu>(rawOption);
        switch (option)
        {
        case Menu::EXIT:
            stop = true;
            break;
        case Menu::ADD:
            cout << "Введите значение a и b нового элемента" << endl
                 << "a: ";
            a = getValue();
            cout << "b: ";
            b = getValue();
            list->add(a, b);
            break;
        case Menu::REMOVE:
            list->remove();
            cout << "Элемент удален" << endl;
            break;
        case Menu::SHOW:
            list->show();
            break;
        case Menu::CHANGE:
            cout << "Введите новые значения a и b" << endl
                << "a: ";
            a = getValue();
            cout << "b: ";
            b = getValue();
            list->change(a, b);
            cout << "Значения изменены" << endl;
            break;
        case Menu::BEGIN:
            list->begin();
            cout << "Элемент перемещен в начало" << endl;
            break;
        case Menu::STEP:
            list->step();
            cout << "Элемент перемещен вправо" << endl;
            break;
        case Menu::SHOWALL:
            cout << "Все элементы:";
            list->showAll();
            break;
        case Menu::FIND:
            cout << "Введите значение c: ";
            a = getValue();
            list->find(a);
            break;
        default:
            cout << "Неправильная опция, попробуйте еще раз" << endl;
            break;
        }
    }
    delete list;
}

int getValue()
{
    while (true)
    {
        int temp = 0;
        cin >> temp;
        if (cin.fail())
        {
            cin.clear();
            cin.ignore(32767, '\n');
            cout << endl << "Некорректный ввод, попробуйте еще раз: ";
        }
        else
        {
            cin.ignore(32767, '\n');
            return temp;
        }
    }

    return 0;
}
